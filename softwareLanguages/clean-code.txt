Chapter 14: Successive Refinement

Case study

Chapter 15: JUnit Internals

JUnit was created by Kent Beck and Eric Gamma. It was a java unit testing framework

Chapter 16: Refactoring SerialDate

Case study

Chapter 17: Smells and Heuristics

Comments:

Innappropriate Information
	Comments should be reserved for technical notes about the code and design

Obselete comment
	dont write a comment that will become obselete with change

Redundant comment
	don't write comments about things that explain themselves
	comments should say things that the code cannot say for itself

Poorly written comment
	a comment worth writting is worth writting well, dont state the obvious, dont ramble, be brief

Commented-out code
	other developers will be afraid of removing these which will cause them to stick around longer then wanted

Environment:

Build requires more then one step
	building a project should be a single trivial operation

Tests require more then one step
	all tests should run with one command, making tests harder to run will make you not want to run them

Functions:

Too many arguments
	functions should have the smallest amount of arguments as possible, extra careful if its ever more then 3

output arguments
	if your function must change the state of something, have it change the state of the object it is called on

flag arguments
	boolean arguments loudly declare that the function does more then one thing, they are confusing and should be eliminated

dead function
	methods that are never called should be discarded, source control will remember it if needed

General

multiple languages in one source file
	the ideal is for a source file to contain one and only one language. realistically this wont always happen but work as hard as possible to make this the case

obvious behavior is unimplemented
	when an obvious behavior is not implemented, readers and users of the code can no longer depend on their intuition about function names

incorrect behavior at the boundaries
	look for every boundary condition and write a test for it

overridden safeties
	it is risky to override safeties

duplication
	DRY (dont repeat yourself). every time you see duplication in thge code, it represents a missed opportunity for abstraction

code at wrong level of abstraction
	separate higher level general concepts from lower level detailed concepts

base classes depending on their derivatives
	in general, base classes should know nothing about their derivatives

too much information
	a well defined interface does not offer very many functions to depend upon, so coupling is low

dead code
	dead code = unexecuted code. often happens in if statements that are never true or catch blocks where the try never throws an error

vertical separation
	variables and functions should be defined close to where they are used
	private functions should be defined just below their first usage

inconsistency
	if you do something a certain way, do all similar things int he same way
	this is a reinforcement of the principle of least surprise

clutter
	variables that arent ysed, functions that are never called, comments that add no information and so forth, these are all considered clutter and should be removed

artifical coupling
	do not couple two modules that sercerse no direct purpose. This often happens when a variable, constant or function is in a temporarily convenient though inappropriate location

feature envy
	when a method uses accessors and mutators of some other object to manipulate the data within that object, then it envies the scope of the class of that other object.
	All else being equal, we want to eliminate this because it exposes the internals of one class to another

selector arguments
	selector arguments are just a lazy way to avoid splitting a large function into several smaller functions.
	In general it is better to have many functions thatn to pass some code into a function to select the bahavior

obscure intent
	take the time to make the intent of our code visible to our readers

misplaced responsibility
	code should be placed where a reader would naturally expect it to be. intuitive beats clever

inappropriate static
	in generak you should prefer nonstatic to static methods. write it non static first and if you must convert make sure youll never need that function to be polymorphic

use explanatory variables
	break the calculations up into intermediate values that are held in variables with meaningful names

function names should say what they do
	if you have to look at the implementation or documentation of the function to know what it does, then you should work to find a better name or rearrange the functionality so that it can be placed in functions with better names

understand the algorithm 
	passing all the tests isnt enough, make sure you understand why your approach worked instead of throwing if statements until it seems to 'work'

make logical dependencies physical 
	if one module depends upon another, that dependcecy should be physical, not just logical

prefer polymorphism to if/else or switch/case
	ther may be no more than one switch statement for a given type of selection. the cases in tha switch statement must create polymorphic objects that take the place of other such switch statements in the rest of the system

follow standard conventions
	each team needs to pick standards followed by everyone

replace magic numbers with named constants
	in general it is bad to have raw numbers in your code, you should hide them behind well named constants

be precise
	ambiguities and imprecision in code are either a results of disagreements or laziness. In either case they should be eliminated

encapsulate conditionals
	booleans are hard to follow and are better represented by a function that returns true or false and has a descriptive name

avoid negative conditionals
	negatives are harder to read then positives

functions should do one thing
	functions that do more then one thing should be broken down into smaller functions

hidden temporal couplings
	structure the arguments of your functions such that the order in which htey should be called is obvious

dont be arbitrary
	if structure feels arbitrary others will feel inclined to change it

encapsulate boundary conditions
	boundary conditions are hard to keep track of, put the processing for them in one place, dont let them leak all over the code

functions should descend only one level of abstraction
	statements within a funciton should all be written at the same level of abstraction, which should be one level below the operation described by the name of the function

keep configurable data at high levels
	if you have a constant such as a default or configuration value that is known and expected at a high level of abstraction, do not bury it in a low-level function. expose it as an arguemtn to that low-level function called from the high level function

avoid transitive navigation
	law of demeter, (write shy code). make sure that modules known only about their immediate collaborators and do not know the navigation map of the whole system

Java

avoid long import lists by using wildcards
	if you use two or more classes from a package, use the wildcard

dont inherit constants
	dont use inheritance as a way to cheat the scoping rules of the language. use static import instead

constants versus enums
	dont use public static final ints, the meaning of this can be lost while the meaning of enums cannot

Names

choose descriptive names
	rememver that meanings tend to drifs as software evolves, so frequently reevaluate the appropriateness of the names you choose

choose names at the apropriate level of abstraction
	dont pick names that communicate implementation, choose names that reflect the level of the abstraction of the class or function you are working in

use standard nomenclature where possible
	it is better to follow conventions then to invent new ones. the more you can resue a name the better

unambiguous names
	choose names that make the workings of a function or variable unamiguous

use long names for long scopes
	the length of a name should be related to the length of the scope

avoid encodings
	keep your names free from hungarian pollution

names should describe side-effects
	names should describe everything that a function, variable or class is or does

Tests

insufficient test
	a test suite shoudl test everything that could possibly break. The tests are insufficient so long as there are conditions that have not been explored by the tests or calculations that have not been validated

use a coverage tool
	coverage tools reports gaps in your testing strategy

dont skip trivial tests
	value is higher than the cost to produce them

an ignored test is a question about an ambiguity
	if you are uncertain about behavoiral detail because the requirements are unclear, write a test with @Ignore

test boundary conditions
	take special care for these

exhaustively test near bugs
	bugs tend to congregate, when you find one test extensively

patterns of failure are revealing
	complete test cases, ordered in a reasonable way, expose patterns

test coverage patterns can be revealong
	looking at the code that is or not executed by the passing tests gives clues to why the failing tests fail

tests should be fast
	a slow test will end up not being run and will be forgotten

	































































































	





























































